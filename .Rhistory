print(days_to_break_printed_msg)
birthdays <- list(
hariank = as.Date("1997-06-06"),
rajiv = as.Date("1971-11-08"),
sangeeta = as.Date("1976-06-29")
)
parent_bday <- format(birthdays[["rajiv"]], format="%m/%d")
print(parent_bday)
# number 6
birthdays_2019 <- lapply(birthdays,format, "2019/%m/%d")
print(birthdays_2019)
# number 7
date_has_passed <-
print(birthdays_2019)
date_has_passed <- function(date) {
date_used <- as.Date(date)
date_passes <- (date_used - Sys.Date() > 0)
date_passes
}
date_has_passed(2019-01-23)
date_has_passed("2019-01-23")
date_has_passed("2019-01-24")
date_has_passed("2019-01-23")
date_has_passed("2019-01-22")
date_has_passed("2019-01-23")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_2018 > salaries$salaries_2017
date_has_passed("2019-01-23")
# What was the 2018 salary of Employee 57
data()
date_has_passed <- function(date) {
date_used <- as.Date(date)
date_passes <- (date_used - Sys.Date() > 0)
date_passes
}
date_has_passed("2019-01-23")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
format_date <- format(se_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement(shivank, 2000-08-13)
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement("2000-08-13")
make_birthday_announcement <- function(date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement("2000-08-13")
format_date <- format(set_date, "2019/%m/%d")
make_birthday_announcement <- function(date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
make_birthday_announcement("2000-08-13")
set_date <- as.Date("2000-08-13")
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
format_date <- format(set_date, as.Date("2019/%m/%d"))
days_until_bday <- format_date - Sys.Date()
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
print(days_until_bday)
set_date <- as.Date("2019-08-13")
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
set_date <- as.Date("2019-01-13")
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
bday_msg <- paste0(name, "'s", "birthday is in ", days_until_bday, "days." )
bday_msg
}
make_birthday_announcement(shivank, 2019-08-13)
make_birthday_announcement("shivank", 2019-08-13)
set_date <- as.Date("2019-08-13")
set_date <- as.Date("2019-08-13")
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
bday_msg <- paste0(name, "'s", "birthday is in ", days_until_bday, "days." )
bday_msg <- paste0("shivank", "'s", "birthday is in ", days_until_bday, "days." )
bday_msg <- paste0("shivank", "'s ", "birthday is in ", days_until_bday, "days." )
bday_msg <- paste0("shivank", "'s ", "birthday is in ", days_until_bday, " days." )
print(bday_msg)
make_birthday_announcement("shivank", "2019-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
bday_msg <- paste0(name, "'s", " birthday is in ", days_until_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
if (days_until_bday < 0) {
new_bday <- days_until_bday + 365
} else {
new_bday <- days_until_bday
}
bday_msg <- paste0(name, "'s", " birthday is in ", days_until_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-08-13")
make_birthday_announcement("shivank", "2019-01-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
if (days_until_bday < 0) {
new_bday <- days_until_bday + 365
} else {
new_bday <- days_until_bday
}
bday_msg <- paste0(name, "'s", " birthday is in ", days_until_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-01-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
if (days_until_bday < 0) {
new_bday <- days_until_bday + 365
} else {
new_bday <- days_until_bday
}
bday_msg <- paste0(name, "'s", " birthday is in ", new_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-01-13")
names(birthdays)
bday_announcements <- mapply(make_birthday_announcement, birthdays)
names(birthdays)
bday_announcements <- mapply(make_birthday_announcement(names(birthdays), 1:3), birthdays)
print(birthdays_2019)
birthdays_2019 <- lapply(birthdays,format, "2019/%m/%d")
birthdays_2019 <- lapply(birthdays,format, as.Date("2019/%m/%d"))
birthdays_2019 <- as.Date(birthdays_as_string_2019)
birthdays_as_string_2019 <- lapply(birthdays,format, ("2019/%m/%d")
birthdays_2019 <- as.Date(birthdays_as_string_2019)
birthdays_as_string_2019 <- lapply(birthdays,format, "2019/%m/%d")
birthdays_2019 <- as.Date(birthdays_as_string_2019)
birthdays_2019 <- lapply(birthdays_as_string_2019, as.Date)
print(birthdays_2019)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, MoreArgs = NULL, SIMPLIFY = FALSE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, MoreArgs = NULL, USE.NAMES = TRUE)
birthdays_2019[1:3]
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1:3], USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = NULL, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], ...,  SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1], MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, USE.NAMES = TRUE)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, USE.NAMES = FALSE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, USE.NAMES = FALSE)
print(bday_announcements)
print(bday_announcements)
library("nycflights13")
library("dplyr")
install.packages("nycflights13")
library("nycflights13")
library("nycflights13")
library("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
View('nycflights13')
library("nycflights13")
install.packages(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
View('nycflights13')
View(nycflights13)
library("nycflights13")
View(nycflights13)
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
install.packages("nycflights13")
library("nycflights")
library("nycflights13")
library("nycflights13")
View("nycflights13")
library(nycflights13)
View(ycflights13)
View(nycflights13)
library(nycflights13)
View(nycflights13)
data()
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
install.packages("nycflights13")
library("nycflights13")
library("nycflights13")
load("nycflights13")
library("nycflights13")
library("nycflights13")
library("nycflights13")
load(library("nycflights13"))
library("nycflights13")
install.packages("nycflights13")
library("nycflights13")
load()
load()
load()
install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
install.packages("nycflights13")
fights
flights
flights
library("nycflights13")
library("dplyr")
flights
load()
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
?load
?datasets
library(help = "datasets")
install.packages("ggmap")
library(ggmap)
citation("ggmap")
map.seattle_city <- qmap("seattle", zoom = 11, source="stamen", maptype="toner",darken = c(.3,"#BBBBBB"))
?register_google
install.packages("shiny")
library(shiny)
my_ui <- fluidPage(
h1("Hello Shiny"),
p("This is my first demo"),
textInput(inputId = "user_name", label="What is your name?")
)
setwd("~/College/INFO 201/its_raining_crime")
setwd("~/College/INFO 201/its_raining_crime")
library(shiny)
source("team_ui.R")
source("team_server.R")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
my_data <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(my_data)
View(my_data)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
my_data <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
make_plot_data <- my_data
make_plot_data <- my_data %>%
filter(rain == TRUE)
make_plot_data <- my_data %>%
filter(rain == TRUE) %>%
filter(neighborhood == "UNIVERSITY")
make_plot_data <- my_data %>%
filter(rain == TRUE) %>%
filter(neighborhood == "UNIVERSITY") %>%
count(subcategory)
View(make_plot_data)
View(make_plot_data)
make_plot_data <- my_data %>%
filter(rain == TRUE) %>%
filter(neighborhood == "UNIVERSITY") %>%
count(subcategory) %>%
arrange(desc(n))
make_plot_data <- my_data %>%
filter(rain == TRUE) %>%
filter(neighborhood == "UNIVERSITY") %>%
count(subcategory) %>%
arrange(desc(n))%>%
top_n(10, n)
View(make_plot_data)
View(make_plot_data)
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
(ui = team_ui, server = team_server)
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
shinyApp(ui = team_ui, server = team_server)
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
shinyApp(ui = team_ui, server = team_server)
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
third_plot_data <- my_data %>%
filter(rain == TRUE) %>%
select(subcategory, PRCP, neighborhood) %>%
filter(neighborhood == "CAPITOL HILL") %>%
count(subcategory, PRCP, neighborhood)
third_plot_data <- my_data %>%
filter(rain == TRUE)
third_plot_data <- my_data %>%
filter(rain == TRUE) %>%
select(subcategory, PRCP, neighborhood)
third_plot_data <- my_data %>%
filter(rain == TRUE) %>%
select(subcategory, PRCP, neighborhood) %>%
filter(neighborhood == "CAPITOL HILL")
third_plot_data <- my_data %>%
filter(rain == TRUE) %>%
select(subcategory, PRCP, neighborhood) %>%
filter(neighborhood == "CAPITOL HILL") %>%
count(subcategory, PRCP, neighborhood)
View(third_plot_data)
View(third_plot_data)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
third_plot_data <- my_data %>%
filter(rain == TRUE) %>%
select(subcategory, PRCP, neighborhood) %>%
filter(neighborhood == "CAPITOL HILL") %>%
count(subcategory, PRCP, neighborhood)
plot_3 <- ggplot(data = third_plot_data) +
geom_hex(mapping = aes(x = n, y = PRCP))+
labs(
title = "Precipitation level and crime",
x = "number of occurences",
y =  "precipitation level"
)
3
plot_3
install.packages("hexbin")
# install.packages("hexbin")
library("hexbin")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
setwd("~/College/INFO 201/its_raining_crime")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
setwd("~/College/INFO 201/its_raining_crime")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
output$text <- renderText({
information <- paste0("This data is shows ", input$metrics, " for the country of ",
input$country, ".", "There is a bar graph sh0wing relavant values and a
table showing the raw data. Both of these can be adjusted using the widgets
on the left")
information
})
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
View(my_data)
source("team_ui.R")
neighborhoods <- unique(data$neighborhood)
source("team_ui.R")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
