<<<<<<< HEAD
license()
clear
hello wolr
3+2
print("Hello Worls")
print("Hello World")
4
2+0+1
2+0+1
print("Hello World")
print("Shivank Mistry")
2+0+1
print("Hello World")
print("Shivank Mistry")
2+0+1
print("Hello World")
print("Shivank Mistry")
my_var <- 201
print(my_var)
# Create a variable `hometown` that stores the city in which you were born
home_town <- "Boise, ID"
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
home_town <- "Boise, ID"
# Assign your name to the variable `my_name`
my_name <- "Shivank Mistry"
# Assign your height (in inches) to a variable `my_height`
my_height <- "5 ft 8 in"
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
home_town <- "Boise, ID"
# Assign your name to the variable `my_name`
my_name <- "Shivank Mistry"
# Assign your height (in inches) to a variable `my_height`
my_height <- "5 ft 8 in"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 150
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- ("I like to eat apples and bananas")
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
intro
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr("lyric,15,32")
fruits <- substr(lyric,15,32)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(a,ee,lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a","ee",lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a","o",lyric)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro,fruits_e)
print(lyric_o)
print(lyric_e)
print(lyric_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
lyric_o <- paste(intro,fruits_e)
print(lyric_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
lyric_o <- paste(intro,fruits_o)
print(lyric_o)
install.packages("stringr")
library("stringr")
word(lyric,2,4)
say_hello <- function(name) {
greeting <- paste("hello", name)
print(greeting)
}
say_hello(Shivank)
say_hello("Shivank")
add_three <- function(value) {
new_number <- (3+"value")
print(new_number)
add_three(5)
print(new_number)
print("Hello")
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
adding_three <- add_three(value)
adding_three
adding_three(7)
print("hello world")
say_hello <- function(name) {
greeting <- paste("hello", name)
print(greeting)
}
print("hello")
11/3
print(birthdays_2019)
#################
#### PART 1 #####
#################
# This installs te stringr package
install.packages("stringr")
library(stringr)
my_age <- 18
my_name <- "Shivank Mistry"
# This function makes an introduction out of your name and age!
make_introduction <- function(age, name) {
introduction <- paste("Hello, my name is",name, "and I'm",age, "years old.")
introduction
}
make_introduction(18, "Shivank")
my_intro <- make_introduction(18, "Shivank Mistry")
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("To Kill a Mockingbird", "The Alchemist", "1984", "Brave New World", "Frankenstein", "Crime and Punishment")
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# This Function removes the book that is in the selected index
remove_book <- function(vector, index) {
remove_book <- vector[-index]
remove_book
}
remove_book(books, 3)
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[books > nchar(15)]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- seq(1,70)
squared_numbers <- numbers*numbers
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
days_to_break <- spring_break - today
days_to_break_printed_msg <- paste("Time difference of", days_to_break, "days")
print(days_to_break_printed_msg)
birthdays <- list(
hariank = as.Date("1997-06-06"),
rajiv = as.Date("1971-11-08"),
sangeeta = as.Date("1976-06-29")
)
parent_bday <- format(birthdays[["rajiv"]], format="%m/%d")
print(parent_bday)
# number 6
birthdays_2019 <- lapply(birthdays,format, "2019/%m/%d")
print(birthdays_2019)
# number 7
date_has_passed <-
print(birthdays_2019)
date_has_passed <- function(date) {
date_used <- as.Date(date)
date_passes <- (date_used - Sys.Date() > 0)
date_passes
}
date_has_passed(2019-01-23)
date_has_passed("2019-01-23")
date_has_passed("2019-01-24")
date_has_passed("2019-01-23")
date_has_passed("2019-01-22")
date_has_passed("2019-01-23")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_2018 > salaries$salaries_2017
date_has_passed("2019-01-23")
# What was the 2018 salary of Employee 57
data()
date_has_passed <- function(date) {
date_used <- as.Date(date)
date_passes <- (date_used - Sys.Date() > 0)
date_passes
}
date_has_passed("2019-01-23")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
format_date <- format(se_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement(shivank, 2000-08-13)
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement(shivank, "2000-08-13")
make_birthday_announcement("2000-08-13")
make_birthday_announcement <- function(date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
days_until_bday
}
make_birthday_announcement("2000-08-13")
format_date <- format(set_date, "2019/%m/%d")
make_birthday_announcement <- function(date) {
set_date <- as.Date(date)
format_date <- format(set_date, "2019/%m/%d")
make_birthday_announcement("2000-08-13")
set_date <- as.Date("2000-08-13")
format_date <- format(set_date, "2019/%m/%d")
days_until_bday <- format_date - Sys.Date()
format_date <- format(set_date, as.Date("2019/%m/%d"))
days_until_bday <- format_date - Sys.Date()
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
print(days_until_bday)
set_date <- as.Date("2019-08-13")
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
set_date <- as.Date("2019-01-13")
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
bday_msg <- paste0(name, "'s", "birthday is in ", days_until_bday, "days." )
bday_msg
}
make_birthday_announcement(shivank, 2019-08-13)
make_birthday_announcement("shivank", 2019-08-13)
set_date <- as.Date("2019-08-13")
set_date <- as.Date("2019-08-13")
days_until_bday <- set_date - Sys.Date()
print(days_until_bday)
bday_msg <- paste0(name, "'s", "birthday is in ", days_until_bday, "days." )
bday_msg <- paste0("shivank", "'s", "birthday is in ", days_until_bday, "days." )
bday_msg <- paste0("shivank", "'s ", "birthday is in ", days_until_bday, "days." )
bday_msg <- paste0("shivank", "'s ", "birthday is in ", days_until_bday, " days." )
print(bday_msg)
make_birthday_announcement("shivank", "2019-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
bday_msg <- paste0(name, "'s", " birthday is in ", days_until_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-08-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
if (days_until_bday < 0) {
new_bday <- days_until_bday + 365
} else {
new_bday <- days_until_bday
}
bday_msg <- paste0(name, "'s", " birthday is in ", days_until_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-08-13")
make_birthday_announcement("shivank", "2019-01-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
if (days_until_bday < 0) {
new_bday <- days_until_bday + 365
} else {
new_bday <- days_until_bday
}
bday_msg <- paste0(name, "'s", " birthday is in ", days_until_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-01-13")
make_birthday_announcement <- function(name, date) {
set_date <- as.Date(date)
days_until_bday <- set_date - Sys.Date()
if (days_until_bday < 0) {
new_bday <- days_until_bday + 365
} else {
new_bday <- days_until_bday
}
bday_msg <- paste0(name, "'s", " birthday is in ", new_bday, " days." )
bday_msg
}
make_birthday_announcement("shivank", "2019-01-13")
names(birthdays)
bday_announcements <- mapply(make_birthday_announcement, birthdays)
names(birthdays)
bday_announcements <- mapply(make_birthday_announcement(names(birthdays), 1:3), birthdays)
print(birthdays_2019)
birthdays_2019 <- lapply(birthdays,format, "2019/%m/%d")
birthdays_2019 <- lapply(birthdays,format, as.Date("2019/%m/%d"))
birthdays_2019 <- as.Date(birthdays_as_string_2019)
birthdays_as_string_2019 <- lapply(birthdays,format, ("2019/%m/%d")
birthdays_2019 <- as.Date(birthdays_as_string_2019)
birthdays_as_string_2019 <- lapply(birthdays,format, "2019/%m/%d")
birthdays_2019 <- as.Date(birthdays_as_string_2019)
birthdays_2019 <- lapply(birthdays_as_string_2019, as.Date)
print(birthdays_2019)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, MoreArgs = NULL, SIMPLIFY = FALSE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, birthdays_2019, MoreArgs = NULL, USE.NAMES = TRUE)
birthdays_2019[1:3]
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1:3], USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = NULL, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], ...,  SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), MoreArgs = birthdays_2019[1], SIMPLIFY = TRUE, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1], MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, USE.NAMES = TRUE)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, USE.NAMES = FALSE)
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), birthdays_2019[1:3], MoreArgs = NULL, USE.NAMES = FALSE)
print(bday_announcements)
print(bday_announcements)
library("nycflights13")
library("dplyr")
install.packages("nycflights13")
library("nycflights13")
library("nycflights13")
library("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
View('nycflights13')
library("nycflights13")
install.packages(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
View('nycflights13')
View(nycflights13)
library("nycflights13")
View(nycflights13)
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
install.packages("nycflights13")
library("nycflights")
library("nycflights13")
library("nycflights13")
View("nycflights13")
library(nycflights13)
View(ycflights13)
View(nycflights13)
library(nycflights13)
View(nycflights13)
data()
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
install.packages("nycflights13")
library("nycflights13")
library("nycflights13")
load("nycflights13")
library("nycflights13")
library("nycflights13")
library("nycflights13")
load(library("nycflights13"))
library("nycflights13")
install.packages("nycflights13")
library("nycflights13")
load()
load()
load()
install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
install.packages("nycflights13")
fights
flights
flights
library("nycflights13")
library("dplyr")
flights
load()
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
# You can look up these airports in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1])
city_fasted_speed <- flights %>%
mutate(speed = distance / air_time * 60) %>%
group_by(dest) %>%
summarise(avg_speed = mean(speed, na.rm = TRUE)) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
city_fasted_speed
?load
?datasets
library(help = "datasets")
install.packages("ggmap")
library(ggmap)
citation("ggmap")
map.seattle_city <- qmap("seattle", zoom = 11, source="stamen", maptype="toner",darken = c(.3,"#BBBBBB"))
?register_google
install.packages("shiny")
library(shiny)
my_ui <- fluidPage(
h1("Hello Shiny"),
p("This is my first demo"),
textInput(inputId = "user_name", label="What is your name?")
)
source("my_ui.R")
source("my_server.R")
setwd("~/College/INFO 201/a8-data-app-shivank-mistry")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
setwd("~/College/INFO 201/its_raining_crime")
source("my_ui.R")
source("my_server.R")
shinyApp(ui = my_ui, server = my_server)
source("my_ui.R")
source("my_server.R")
source("team_ui.R")
source("team_server.R")
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
setwd("~/College/INFO 201/its_raining_crime")
shinyApp(ui = team_ui, server = team_server)
source("team_ui.R")
source("team_server.R")
shinyApp(ui = team_ui, server = team_server)
=======
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
## Facets
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
## Saving Plots
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
# Exercise 2: advanced ggplot2 practice
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
#?diamonds
## Position Adjustments
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
## Scales
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
## Coordinate Systems
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
# Draw the same chart, but with the coordinate system flipped
# Draw the same chart, but in a polar coordinate system. It's a Coxcomb chart!
## Facets
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
## Saving Plots
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
# Make sure you've set the working directory!!
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
inner_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood)
#select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
inner_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood) %>%
select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
clear
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
inner_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood) %>%
select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
setwd("~/Programming/INFO201/its_raining_crime")
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
inner_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood) %>%
select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
View(crime_data)
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
select(date, subcategory, neighborhood) %>%
inner_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood) %>%
select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
select(date, Crime.Subcategory, Neighborhood) %>%
inner_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood) %>%
select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
library("dplyr")
crime_data <- read.csv("crime_data.csv", stringsAsFactors = FALSE)
rain_data <- read.csv("seattle_rain.csv", stringsAsFactors = FALSE)
rain_data <- rain_data %>%
mutate(date = as.Date(DATE, "%Y-%m-%d"), rain = RAIN)
crime_data_with_weather <- crime_data %>%
mutate(date = as.Date(Reported.Date, "%Y-%m-%d")) %>%
#select(date, Crime.Subcategory, Neighborhood) %>%
left_join(rain_data, by = "date") %>%
mutate(subcategory = Crime.Subcategory,
description = Primary.Offense.Description,
neighborhood = Neighborhood) %>%
select(date, subcategory, neighborhood, rain, PRCP, TMAX, TMIN)
# bens table didn't load
write.csv(crime_data_with_weather, "trimmed_data.csv", row.names = F)
# returns most recent crimes with n being the number of crimes
get_recent_crimes <- function(num) {
recent = tail(crime_data_with_weather, n = num)
return(recent)
}
crime_data_with_weather <- read.csv("trimmed_data.csv", stringsAsFactors = FALSE)
View(crime_data_with_weather)
#
# 1. What crime is the least likely to occur when it is raining?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
least_crime_dis <- least_crime %>% filter(n == min(n))
#   ###### This question can help determine the effect that rain has on a certain crime
#   2. What crime rate is effected the most by rain?
rain_crime <- crime_data_with_weather %>% filter(rain == "TRUE") %>% select(subcategory)
least_crime <- rain_crime %>% count(subcategory)
no_rain_crime <- crime_data_with_weather %>% filter(rain == "FALSE") %>% select(subcategory)
no_least_crime <- no_rain_crime %>% count(subcategory)
combined_data <- full_join(least_crime, no_least_crime,"subcategory")
most_effected <- combined_data %>% mutate(most = 100*(n.x - n.y)/n.y)
most_effected <- most_effected %>% filter(most == max(most))
names(most_effected)[2] <- "Raining"
names(most_effected)[3] <- "Not Raining"
names(most_effected)[4] <- "Percent Increase"
View(most_effected)
#   ###### This can help law enforcement determine what they should devote resources towards when it is raining.
#   3. What neighboorhood has the largest percentage increase in crime when it does not rain.
neighborhood_crime <- crime_data_with_weather %>% select(neighborhood,rain)
neighborhood_crime_rain <- neighborhood_crime %>% filter(rain == TRUE) %>% select(neighborhood)
neighborhood_crime_no_rain <- neighborhood_crime %>% filter(rain == FALSE) %>% select(neighborhood)
neighborhood_rain_count <- neighborhood_crime_rain %>% count(neighborhood)
names(neighborhood_rain_count)[2] <- "Raining"
neighborhood_no_rain_count <- neighborhood_crime_no_rain %>% count(neighborhood)
names(neighborhood_no_rain_count)[2] <- "Not_Raining"
joined_data <- neighborhood_rain_count %>%
inner_join(neighborhood_no_rain_count, by = "neighborhood") %>%
mutate(percentage = 100*(Not_Raining-Raining)/Not_Raining) %>%
filter(percentage == max(percentage))
View(joined_data)
# ###### This will help understand what characteristics of a neighborhood leads to more crime
# 4. What crime is commited the most when the temperature is below 32 degrees? Above 75? Is it the same crime, did the temperature effect the most common crime?
#   ###### This can help law enforcement determine what they should devote resources to when it is warm or cold.
#   5. what season has the most crime? is it consistent from year to year?
#   Done!!!!
#   ###### This can help law enforcement predict trends in crime based on the weather and historical data
#   6. What crime rate has the largest increase when it rains in the University district.
# ###### This can help predict crime trends in the UDistrict based on the weather
# 7. What is the most common crime for Seattle the most common crime in every neighboorhood?
#Done!!!!
>>>>>>> 4d8e03d7bb6ef475876b05de3088b16329ff1877
